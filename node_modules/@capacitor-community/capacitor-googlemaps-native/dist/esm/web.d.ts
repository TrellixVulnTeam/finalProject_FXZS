import { WebPlugin } from '@capacitor/core';
import { CapacitorGoogleMapsPlugin } from './definitions';
import { LatLng } from './types/common/latlng.interface';
import { CircleOptions } from './types/shapes/circle.interface';
import { PolygonOptions } from './types/shapes/polygon.interface';
import { PolylineOptions } from './types/shapes/polyline.interface';
export declare class CapacitorGoogleMapsWeb extends WebPlugin implements CapacitorGoogleMapsPlugin {
    constructor();
    create(_options: {
        width: number;
        height: number;
        x: number;
        y: number;
        latitude?: number;
        longitude?: number;
        zoom?: number;
        liteMode?: boolean;
    }): Promise<any>;
    initialize(_options: {
        key: string;
    }): Promise<any>;
    addMarker(_options: {
        latitude: number;
        longitude: number;
        opacity?: number;
        title?: string;
        snippet?: string;
        isFlat?: boolean;
        url?: string;
    }): Promise<any>;
    removeMarker(_options: {
        id: number;
    }): Promise<any>;
    setCamera(_options: {
        viewingAngle?: number;
        bearing?: number;
        zoom?: number;
        latitude?: number;
        longitude?: number;
        animate?: boolean;
        animationDuration?: number;
        coordinates?: LatLng[];
    }): Promise<any>;
    setMapType(_options: {
        type: string;
    }): Promise<any>;
    setIndoorEnabled(_options: {
        enabled: boolean;
    }): Promise<any>;
    setTrafficEnabled(_options: {
        enabled: boolean;
    }): Promise<any>;
    accessibilityElementsHidden(_options: {
        hidden: boolean;
    }): Promise<any>;
    padding(_options: {
        top: number;
        left: number;
        right: number;
        bottom: number;
    }): Promise<any>;
    clear(): Promise<any>;
    close(): Promise<any>;
    hide(): Promise<any>;
    show(): Promise<any>;
    settings(_options: {
        allowScrollGesturesDuringRotateOrZoom?: boolean;
        compassButton?: boolean;
        consumesGesturesInView?: boolean;
        indoorPicker?: boolean;
        myLocationButton?: boolean;
        rotateGestures?: boolean;
        scrollGestures?: boolean;
        tiltGestures?: boolean;
        zoomGestures?: boolean;
    }): Promise<any>;
    reverseGeocodeCoordinate(_options: {
        latitude: number;
        longitude: number;
    }): Promise<any>;
    enableCurrentLocation(_options: {
        enabled: boolean;
    }): Promise<any>;
    myLocation(_options: any): Promise<any>;
    viewBounds(): Promise<any>;
    setMapStyle(_options: {
        jsonString: string;
    }): Promise<any>;
    addPolyline(_options: PolylineOptions): Promise<any>;
    addCircle(_options: CircleOptions): Promise<any>;
    addPolygon(_options: PolygonOptions): Promise<any>;
    setOnMarkerClickListener(): Promise<any>;
    setOnMapClickListener(): Promise<any>;
    setOnPoiClickListener(): Promise<any>;
    requestLocationPermission(): Promise<any>;
    setOnMyLocationClickListener(): Promise<any>;
    setOnMyLocationButtonClickListener(): Promise<any>;
}
